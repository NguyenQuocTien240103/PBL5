#include <Arduino.h>
#include <IRremote.hpp>

// Ch√¢n ƒëi·ªÅu khi·ªÉn m√¥ t∆° b∆∞·ªõc
#define STEPPER_PIN_1 9
#define STEPPER_PIN_2 10
#define STEPPER_PIN_3 11
#define STEPPER_PIN_4 12

// Ch√¢n ƒëi·ªÅu khi·ªÉn c·ª≠a tr∆∞·ª£t
#define IN1 7
#define IN2 6

// Ch√¢n IR receiver
#define IR_RECEIVE_PIN 2

// Ch√¢n LED v√† buzzer
#define LED_PIN 3
#define BUZZER_PIN 4

// C·∫•u h√¨nh
const int steps_per_revolution = 2048;
const int step_075_round = int(steps_per_revolution * 0.75);
int step_number = 0;
unsigned long lastTime = millis();
bool flag_run_stepper = false;
int count_mo_cua = 0; // Bi·∫øn ƒë·∫øm tr·∫°ng th√°i c·ª≠a (0: ƒë√≥ng, 1: ƒë√£ m·ªü)

void OneStep(bool dir);
void runStepper(bool dir, int steps);
void moCua();
void dongCua();

void setup() {
  // Kh·ªüi t·∫°o ch√¢n I/O
  pinMode(STEPPER_PIN_1, OUTPUT);
  pinMode(STEPPER_PIN_2, OUTPUT);
  pinMode(STEPPER_PIN_3, OUTPUT);
  pinMode(STEPPER_PIN_4, OUTPUT);

  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(LED_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);

  digitalWrite(LED_PIN, LOW);

  Serial.begin(9600);
  Serial.println("Arduino s·∫µn s√†ng. G·ª≠i '1' ƒë·ªÉ quay m√¥ t∆°, '2' ƒë·ªÉ m·ªü c·ª≠a, '3' ƒë·ªÉ ƒë√≥ng c·ª≠a, '4' khi ph√°t hi·ªán ng∆∞·ªùi, '9' quay ng∆∞·ª£c.");

  IrReceiver.begin(IR_RECEIVE_PIN, ENABLE_LED_FEEDBACK);
}

void loop() {
  // Nh·∫≠n l·ªánh qua Serial
  if (Serial.available()) {
    String command = Serial.readStringUntil('\n');
    command.trim();
    Serial.print("Nh·∫≠n l·ªánh: ");
    Serial.println(command);

    if (command == "1") {
      if (count_mo_cua == 0) {
        Serial.println("ƒêang quay m√¥ t∆° 0.75 v√≤ng...");
        runStepper(true, step_075_round);
        Serial.println("ƒê√£ quay xong.");
        count_mo_cua = 1;
      } else {
        Serial.println("C·ª≠a ƒëang m·ªü, kh√¥ng th·ªÉ m·ªü ti·∫øp!");
      }
    } else if (command == "2") {
      Serial.println("üé§ Gi·ªçng n√≥i: M·ªû C·ª¨A");
      moCua();
      
    } else if (command == "3") {
      Serial.println("üé§ Gi·ªçng n√≥i: ƒê√ìNG C·ª¨A");
      dongCua();
      
    } else if (command == "4") {
      Serial.println("üîç Ph√°t hi·ªán ng∆∞·ªùi!");
      digitalWrite(LED_PIN, HIGH);
      tone(BUZZER_PIN, 1000, 200);
    } else if (command == "5") {
      digitalWrite(LED_PIN, HIGH);
      Serial.println("ƒê√®n B·∫¨T");
    } else if (command == "6") {
      digitalWrite(LED_PIN, LOW);
      Serial.println("ƒê√®n T·∫ÆT");
    } else if (command == "7") {
      digitalWrite(LED_PIN, HIGH);
      tone(BUZZER_PIN, 1000, 200);
      Serial.println("B√°o ƒë·ªông B·∫¨T");
    } else if (command == "8") {
      noTone(BUZZER_PIN);
      digitalWrite(LED_PIN, LOW);
      Serial.println("B√°o ƒë·ªông T·∫ÆT");
    } else if (command == "9") {
      Serial.println("ƒêang quay m√¥ t∆° NG∆Ø·ª¢C 0.75 v√≤ng...");
      runStepper(false, step_075_round);
      count_mo_cua = 0; // ƒê√≥ng c·ª≠a xong cho ph√©p m·ªü l·∫°i
      Serial.println("ƒê√£ quay xong.");
    } else if (command == "10") {
      digitalWrite(LED_PIN, HIGH);
      Serial.println("ƒê√®n B·∫¨T (kh√¥ng buzzer)");
    } else {
      Serial.println("L·ªánh kh√¥ng h·ª£p l·ªá.");
    }
  }

  // Nh·∫≠n t√≠n hi·ªáu IR
  if (IrReceiver.decode()) {
    uint32_t code = IrReceiver.decodedIRData.decodedRawData;
    if (code && millis() - lastTime > 250) {
      switch (code) {
        case 3125149440: dongCua(); count_mo_cua = 0; break;  // N√∫t 1
        case 3108437760:
          if (count_mo_cua == 0) {
            moCua();
            count_mo_cua = 1;
          } else {
            Serial.println("C·ª≠a ƒëang m·ªü, kh√¥ng th·ªÉ m·ªü ti·∫øp!");
          }
          break;
        case 3091726080:
          if (count_mo_cua == 0) {
            runStepper(true, step_075_round);
            count_mo_cua = 1;
          } else {
            Serial.println("C·ª≠a ƒëang m·ªü, kh√¥ng th·ªÉ m·ªü ti·∫øp!");
          }
          break;
        case 3141861120: digitalWrite(LED_PIN, !digitalRead(LED_PIN)); break; // N√∫t 4
        case 4161273600: digitalWrite(LED_PIN, LOW); break;   // N√∫t 7
        case 3927310080: digitalWrite(LED_PIN, HIGH); break;  // N√∫t 8
        case 3208707840: runStepper(false, step_075_round);  break; // N√∫t 5: Quay ng∆∞·ª£c
      }
      lastTime = millis();
    }
    IrReceiver.resume();
  }
}

// H√†m quay m√¥ t∆° nhi·ªÅu b∆∞·ªõc
void runStepper(bool dir, int steps) {
  for (int i = 0; i < steps; i++) {
    OneStep(dir);
    delay(5);
  }
}

// H√†m quay m·ªôt b∆∞·ªõc
void OneStep(bool dir) {
  if (dir) step_number++;
  else step_number--;

  if (step_number > 3) step_number = 0;
  if (step_number < 0) step_number = 3;

  switch (step_number) {
    case 0: digitalWrite(STEPPER_PIN_1, HIGH); digitalWrite(STEPPER_PIN_2, LOW);  digitalWrite(STEPPER_PIN_3, LOW);  digitalWrite(STEPPER_PIN_4, LOW); break;
    case 1: digitalWrite(STEPPER_PIN_1, LOW);  digitalWrite(STEPPER_PIN_2, HIGH); digitalWrite(STEPPER_PIN_3, LOW);  digitalWrite(STEPPER_PIN_4, LOW); break;
    case 2: digitalWrite(STEPPER_PIN_1, LOW);  digitalWrite(STEPPER_PIN_2, LOW);  digitalWrite(STEPPER_PIN_3, HIGH); digitalWrite(STEPPER_PIN_4, LOW); break;
    case 3: digitalWrite(STEPPER_PIN_1, LOW);  digitalWrite(STEPPER_PIN_2, LOW);  digitalWrite(STEPPER_PIN_3, LOW);  digitalWrite(STEPPER_PIN_4, HIGH); break;
  }
}

// H√†m m·ªü c·ª≠a
void moCua() {
  digitalWrite(IN1, LOW);
  analogWrite(IN2, 100);
  delay(500);
  analogWrite(IN2, 0);
  digitalWrite(IN1, LOW);
}

// H√†m ƒë√≥ng c·ª≠a
void dongCua() {
  digitalWrite(IN1, HIGH);
  analogWrite(IN2, 100);
  delay(500);
  analogWrite(IN2, 0);
  digitalWrite(IN1, LOW);
}
