from fastapi import FastAPI
from fastapi.responses import StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
from app.routers import voice_recognize
from app.routers import face_recognize
from app.routers import camera
from app.routers import auth
from app.routers import ws_admin_user
from app.routers import user
from pymongo import MongoClient
from ultralytics import YOLO
from fastapi import Response
import cv2
import threading  
import time
from datetime import datetime
import os
import subprocess
from picamera2.outputs import FileOutput
import json
from fastapi import APIRouter,Request
from fastapi import APIRouter
from fastapi.responses import StreamingResponse
from app.routers.arduino_connection import get_arduino
from app.core.shared import picam2, lock, camera_active
# test
from starlette.middleware.base import BaseHTTPMiddleware
from app.routers import video
# from config.database import db

app = FastAPI()
# test

class SecurityHeadersMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        response: Response = await call_next(request)
        response.headers["Cross-Origin-Opener-Policy"] = "same-origin"
        response.headers["Cross-Origin-Embedder-Policy"] = "require-corp"
        return response


app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=False,
    allow_methods=["*"],
    allow_headers=["*"],
)

# test
app.add_middleware(SecurityHeadersMiddleware)

app.include_router(voice_recognize.router)
app.include_router(face_recognize.router)
app.include_router(camera.router)
app.include_router(auth.router)
app.include_router(ws_admin_user.router)
app.include_router(user.router)
app.include_router(video.router)






if not os.path.exists("videos"):
    os.makedirs("videos")

video_writer = None
last_frame_time = None
video_filename = None

model = YOLO("/home/lenovo/PBL5/be/best_yolov8_dark.pt")
coco_labels = model.names  # Danh s√°ch nh√£n


camera_active = False
lock = threading.Lock()

def run_person_detection():
    arduino = get_arduino()
  
    
    print("B·∫Øt ƒë·∫ßu ph√°t hi·ªán ng∆∞·ªùi")
    
 
    while True:
        print("B·∫Øt ƒë·∫ßu ph√°t hi·ªán ng∆∞·ªùi vl")

        # ƒê·ªçc config m·ªói v√≤ng l·∫∑p (n·∫øu b·∫°n hay c·∫≠p nh·∫≠t file)
        try:
            with open("config.json", "r") as f:
                time_config = json.load(f)
                year_start = int(time_config.get("year_start", 0))
                year_end = int(time_config.get("year_end", 9999))
                month_start = int(time_config.get("month_start", 1))
                month_end = int(time_config.get("month_end", 12))
                day_start = int(time_config.get("day_start", 1))
                day_end = int(time_config.get("day_end", 31))
                hours_start = int(time_config.get("hours_start", 0))
                hours_end = int(time_config.get("hours_end", 23))

        except Exception as e:
            print(f"L·ªói ƒë·ªçc config.json: {e}")
            year_start = year_end = None
            month_start = month_end = None
            day_start = day_end = None
            hours_start = hours_end = None

        
        print("abc")
        frame = picam2.capture_array("main")
        print("abcd")
        results = model(frame, verbose=False)[0]
        print("abcdf")
        person_detected = any(int(box.cls[0]) == 0 for box in results.boxes)
        print(f"person_detected: {person_detected}")


        now = datetime.now()
        current_hour = now.hour
        print(f"Th·ªùi gian hi·ªán t·∫°i: {hours_start}, Gi·ªù hi·ªán t·∫°i: {hours_end}")
        # N·∫øu c·∫£ 2 gi√° tr·ªã l√† None ‚Üí g·ª≠i t√≠n hi·ªáu b·∫•t k·ª≥ l√∫c n√†o
        if hours_start is None and hours_end is None:
            if person_detected:
                print("B·∫Øt ƒë·∫ßu ph√°t hi·ªán ng∆∞·ªùi a")
                arduino.write(b'10\n')

        # N·∫øu trong kho·∫£ng th·ªùi gian cho ph√©p th√¨ g·ª≠i t√≠n hi·ªáu
        elif hours_start is not None and hours_end is not None:
            try:
                today = datetime(now.year, now.month, now.day)
                config_date_start = datetime(year_start, month_start, day_start)
                config_date_end = datetime(year_end, month_end, day_end)
                print(f"Th·ªùi gian bawts dauf: {hours_start}, Gi·ªù hi·ªán t·∫°i: {current_hour}, gio ket thuc: {hours_end}")
                if config_date_start <= today <= config_date_end and hours_start <= current_hour < hours_end:
                    if person_detected:
                        print("Ph√°t hi·ªán ng∆∞·ªùi trong th·ªùi gian cho ph√©p")
                        arduino.write(b'4\n')
                else:
                    if person_detected:
                        print("B·∫Øt ƒë·∫ßu ph√°t hi·ªán ng∆∞·ªùi a")
                        arduino.write(b'10\n')

            except Exception as e:
                print("L·ªói khi x·ª≠ l√Ω th·ªùi gian:", e)

        # Qu·∫£n l√Ω danh s√°ch video, ch·ªâ gi·ªØ t·ªëi ƒëa 10 file
        def get_video_files():
            files = [f for f in os.listdir('videos') if f.endswith('.mp4')]
            files.sort(key=lambda x: os.path.getmtime(os.path.join('videos', x)))
            return files

        # Tr√°nh ghi li√™n t·ª•c, ch·ªâ ghi khi ch∆∞a ghi ho·∫∑c ƒë√£ xong video tr∆∞·ªõc
        if person_detected and not getattr(run_person_detection, 'is_recording', False):
            run_person_detection.is_recording = True
            try:
                from picamera2.encoders import H264Encoder
                from picamera2.outputs import FileOutput
                now = datetime.now()
                video_filename = f"videos/video_{now.strftime('%Y%m%d_%H%M%S')}.h264"
                mp4_file = f"videos/video_{now.strftime('%Y%m%d_%H%M%S')}.mp4"
                print(f"Ghi video v√†o file: {video_filename}")
                encoder = H264Encoder()
                output = FileOutput(video_filename)
                picam2.start_recording(encoder, output)
                time.sleep(2)  # Ghi trong 2 gi√¢y
                picam2.stop_recording()
                picam2.start()  # B·∫Øt bu·ªôc ph·∫£i start l·∫°i preview sau khi stop_recording ƒë·ªÉ capture_array kh√¥ng b·ªã treo
                print(f"‚úÖ ƒê√£ l∆∞u {video_filename}")

                # Chuy·ªÉn sang .mp4
                if os.path.exists(video_filename):
                    print(f"üîÑ ƒêang chuy·ªÉn {video_filename} ‚Üí {mp4_file}")
                    cmd = [
                        "ffmpeg",
                        "-framerate", "30",
                        "-i", video_filename,
                        "-c:v", "libx264",
                        "-preset", "fast",
                        "-pix_fmt", "yuv420p",
                        mp4_file
                    ]
                    subprocess.run(cmd)
                    print(f"‚úÖ ƒê√£ chuy·ªÉn xong: {mp4_file}")
                    os.remove(video_filename)

                # Gi·ªõi h·∫°n ch·ªâ gi·ªØ 10 video mp4 m·ªõi nh·∫•t
                video_files = get_video_files()
                while len(video_files) > 10:
                    file_to_remove = os.path.join('videos', video_files[0])
                    os.remove(file_to_remove)
                    print(f"ƒê√£ xo√° video c≈©: {file_to_remove}")
                    video_files = get_video_files()
            finally:
                run_person_detection.is_recording = False

        # Bi·∫øn ƒë·∫øm th·ªùi gian kh√¥ng ph√°t hi·ªán ng∆∞·ªùi
        if not hasattr(run_person_detection, 'no_person_start'):
            run_person_detection.no_person_start = None
        if not hasattr(run_person_detection, 'light_on'):
            run_person_detection.light_on = False

        if person_detected:
            # N·∫øu v·ª´a ph√°t hi·ªán ng∆∞·ªùi, b·∫≠t ƒë√®n n·∫øu ch∆∞a b·∫≠t
            if not run_person_detection.light_on:
                arduino.write(b'5\n')  # V√≠ d·ª•: command b·∫≠t ƒë√®n l√† 5
                run_person_detection.light_on = True
                print('ƒê√£ b·∫≠t ƒë√®n')
            run_person_detection.no_person_start = None  # Reset timer khi ph√°t hi·ªán ng∆∞·ªùi
        else:
            # N·∫øu kh√¥ng ph√°t hi·ªán ng∆∞·ªùi, b·∫Øt ƒë·∫ßu ƒë·∫øm th·ªùi gian
            if run_person_detection.light_on:
                if run_person_detection.no_person_start is None:
                    run_person_detection.no_person_start = time.time()
                elif time.time() - run_person_detection.no_person_start > 10:
                    arduino.write(b'6\n')  # Command t·∫Øt ƒë√®n
                    run_person_detection.light_on = False
                    run_person_detection.no_person_start = None
                    print('ƒê√£ t·∫Øt ƒë√®n do kh√¥ng ph√°t hi·ªán ng∆∞·ªùi trong 30s')

        time.sleep(0.1)


threading.Thread(target=run_person_detection, daemon=True).start()